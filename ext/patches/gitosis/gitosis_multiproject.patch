--- gitosis/access.py	2009-09-17 08:32:59.000000000 +0300
+++ gitosis/access.py	2012-11-16 15:29:42.912873631 +0200
@@ -1,6 +1,13 @@
 import os, logging
 from ConfigParser import NoSectionError, NoOptionError

+from trac.env import open_environment
+from trac.perm import PermissionCache
+
+from multiproject.core.configuration import conf
+from multiproject.core.proto import ProtocolManager
+from multiproject.common.projects import Project
+
 from gitosis import group

 def haveAccess(config, user, mode, path):
@@ -86,3 +93,45 @@
                 path=mapping,
                 ))
             return (prefix, mapping)
+
+    # PATCH: Authenticate against MultiProject backend(s)
+
+    if path.startswith('git/'):
+        path = path[4:]
+    project_name = path
+
+    env = open_environment(conf.getEnvironmentSysPath(project_name), use_cache=True)
+
+    # Ensure project is using git repo
+    if env.config.get('trac', 'repository_type', default='') != 'git':
+        return None
+
+    # Map the mode to the action.
+    action = None
+    if mode == 'readonly':
+        action = 'VERSION_CONTROL_VIEW'
+    elif mode in ('writable', 'writeable'):
+        action = 'VERSION_CONTROL'
+    else:
+        return None
+
+    # Check if protocol is allowed or not
+    project = Project.get(env)
+    protocols = ProtocolManager(project.id)
+    if not protocols.is_protocol_allowed('ssh', 'git'):
+        return None
+
+    # Check permissions
+    if action in PermissionCache(env, username=user):
+        env.log.info('Granted Gitosis access for %s as %s on %s' % (user, mode, path))
+
+        # Get the prefix and mapping
+        vcs_path = conf.getEnvironmentVcsPath(project_name)
+        if vcs_path:
+            mapping = path
+            prefix = os.path.dirname(vcs_path)
+            log.debug('Using prefix %(prefix)r for %(path)r' %
+                      dict(prefix=prefix, path=mapping,))
+            return prefix, mapping
+    else:
+        env.log.warning('Unauthorized access for %s as %s on %s' % (user, mode, path))

--- gitosis/init.py	2009-09-17 08:32:59.000000000 +0300
+++ gitosis/init.py	2012-11-16 15:01:30.000000000 +0200
@@ -129,7 +129,7 @@
         log.info('Creating repository structure...')
         repositories = util.getRepositoryDir(cfg)
         util.mkdir(repositories)
-        admin_repository = os.path.join(repositories, 'gitosis-admin.git')
+        admin_repository = os.path.join(repositories, 'gitosis-admin') # CQDE change: removed .git extension.
         init_admin_repository(
             git_dir=admin_repository,
             pubkey=pubkey,

--- gitosis/run_hook.py	2009-09-17 08:32:59.000000000 +0300
+++ gitosis/run_hook.py	2012-11-16 15:01:30.000000000 +0200
@@ -34,14 +34,17 @@
     gitweb.set_descriptions(
         config=cfg,
         )
-    generated = util.getGeneratedFilesDir(config=cfg)
-    gitweb.generate_project_list(
-        config=cfg,
-        path=os.path.join(generated, 'projects.list'),
-        )
-    gitdaemon.set_export_ok(
-        config=cfg,
-        )
+    # Multiproject does not need generated projects list, or git-daemon
+    # to access the repositories. Accesses are checked in a custom way
+    # where the handling of the repository is left for gitosis.
+    # generated = util.getGeneratedFilesDir(config=cfg)
+    # gitweb.generate_project_list(
+    #     config=cfg,
+    #     path=os.path.join(generated, 'projects.list'),
+    #     )
+    # gitdaemon.set_export_ok(
+    #     config=cfg,
+    #     )
     authorized_keys = util.getSSHAuthorizedKeysPath(config=cfg)
     ssh.writeAuthorizedKeys(
         path=authorized_keys,

--- gitosis/serve.py	2009-09-17 08:32:59.000000000 +0300
+++ gitosis/serve.py	2012-11-16 15:01:30.000000000 +0200
@@ -128,7 +128,9 @@
     (topdir, relpath) = newpath
     assert not relpath.endswith('.git'), \
            'git extension should have been stripped: %r' % relpath
-    repopath = '%s.git' % relpath
+    #repopath '%s.git' % relpath    # CQDE does not use .git extension for
+    repopath = relpath              # its project repositories.
+
     fullpath = os.path.join(topdir, repopath)
     if not os.path.exists(fullpath):
         # it doesn't exist on the filesystem, but the configuration

--- gitosis/ssh.py	2009-09-17 08:32:59.000000000 +0300
+++ gitosis/ssh.py	2012-11-16 15:01:30.000000000 +0200
@@ -34,14 +34,14 @@
 COMMENT = '### autogenerated by gitosis, DO NOT EDIT'

 def generateAuthorizedKeys(keys):
-    TEMPLATE=('command="gitosis-serve %(user)s",no-port-forwarding,'
+    TEMPLATE=('command="GIT_COMMITTER_NAME=%(user)s gitosis-serve %(user)s",no-port-forwarding,'
               +'no-X11-forwarding,no-agent-forwarding,no-pty %(key)s')

     yield COMMENT
     for (user, key) in keys:
         yield TEMPLATE % dict(user=user, key=key)

-_COMMAND_RE = re.compile('^command="(/[^ "]+/)?gitosis-serve [^"]+",no-port-forw'
+_COMMAND_RE = re.compile('^command="[^"]+ (/[^ "]+/)?gitosis-serve [^"]+",no-port-forw'
                          +'arding,no-X11-forwarding,no-agent-forwardi'
                          +'ng,no-pty .*')

